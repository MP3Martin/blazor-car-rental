@inject IDialogService DialogService
@inject StateService StateService

<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(_isEditing ? Icons.Material.Filled.Edit : Icons.Material.Filled.PersonAdd)"
                     Class="mr-3 mb-n1"/>
            @(_isEditing ? "Edit" : "Add") a customer
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm EditContext="_editContext" OnValidSubmit="Ok">
            <DataAnnotationsValidator/>
            <MudTextField OnlyValidateIfDirty="true" @bind-Value="Model.Name" For="() => Model.Name"
                          Label="Name" Immediate="true"/>
        </EditForm>
    </DialogContent>

    <DialogActions>
        @if (_isEditing) {
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete" Size="Size.Small">
                DELETE
            </MudButton>
        }
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="Cancel" Size="Size.Small">
            CANCEL
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="!_editContext.Validate()"
                   OnClick="TrySubmitForm" Size="@Size.Small">
            OK
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    private void Ok() {
        MudDialog.Close(DialogResult.Ok(Model));
    }

    private void Delete() {
        DialogService.Show<ConfirmDeleteDialog<Customer>>(null,
            new DialogParameters<ConfirmDeleteDialog<Customer>> {
                { x => x.Item, CustomerParameter }
            },
            new() {
                FullWidth = true,
                CloseOnEscapeKey = true
            }
        );
    }

    private void TrySubmitForm() {
        if (_editContext.Validate()) {
            Ok();
        }
    }

    private void Cancel() {
        MudDialog.Cancel();
    }

    [Parameter]
    public Customer? CustomerParameter { get; set; }

    public Customer Model { get; private set; } = null!;

    private EditContext _editContext = null!;

    private bool _isEditing;

    protected override void OnInitialized() {
        _isEditing = CustomerParameter is not null;
        CustomerParameter ??= new(StateService);
        Model = CustomerParameter with { };
        _editContext = new(Model);
    }
}